//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `Feed`.
    static let feed = _R.storyboard.feed()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Map`.
    static let map = _R.storyboard.map()
    /// Storyboard `Notifications`.
    static let notifications = _R.storyboard.notifications()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Upload`.
    static let upload = _R.storyboard.upload()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Feed", bundle: ...)`
    static func feed(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.feed)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Map", bundle: ...)`
    static func map(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.map)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Notifications", bundle: ...)`
    static func notifications(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notifications)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Upload", bundle: ...)`
    static func upload(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.upload)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `BlankImage`.
    static let blankImage = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlankImage")
    /// Color `SpotBlack`.
    static let spotBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "SpotBlack")
    /// Color `SpotGreen`.
    static let spotGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "SpotGreen")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlankImage", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blankImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blankImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SpotBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spotBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spotBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SpotGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spotGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spotGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlankImage", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blankImage(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blankImage.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SpotBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spotBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spotBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SpotGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spotGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spotGreen.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"
    static let comAppleDeveloperAuthenticationServicesAutofillCredentialProvider = true

    struct comAppleDeveloperAssociatedDomains {
      static let applinksSp0tApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:*.sp0t.app") ?? "applinks:*.sp0t.app"
      static let webcredentialsSp0tApp = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "webcredentials:*.sp0t.app") ?? "webcredentials:*.sp0t.app"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `SF-Compact-Text-Bold.otf`.
    static let sfCompactTextBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Bold", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Heavy.otf`.
    static let sfCompactTextHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Heavy", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Medium.otf`.
    static let sfCompactTextMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Medium", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Regular.otf`.
    static let sfCompactTextRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Regular", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Semibold.otf`.
    static let sfCompactTextSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Semibold", pathExtension: "otf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Bold", withExtension: "otf")`
    static func sfCompactTextBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Heavy", withExtension: "otf")`
    static func sfCompactTextHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Medium", withExtension: "otf")`
    static func sfCompactTextMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Regular", withExtension: "otf")`
    static func sfCompactTextRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Semibold", withExtension: "otf")`
    static func sfCompactTextSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 267 images.
  struct image {
    /// Image `AcceptedTheirFriendRequest`.
    static let acceptedTheirFriendRequest = Rswift.ImageResource(bundle: R.hostingBundle, name: "AcceptedTheirFriendRequest")
    /// Image `AcceptedYourFriendRequest`.
    static let acceptedYourFriendRequest = Rswift.ImageResource(bundle: R.hostingBundle, name: "AcceptedYourFriendRequest")
    /// Image `ActiveTag`.
    static let activeTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ActiveTag")
    /// Image `AddCollaboratorsButton`.
    static let addCollaboratorsButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddCollaboratorsButton")
    /// Image `AddFriendIcon`.
    static let addFriendIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddFriendIcon")
    /// Image `AddMembers`.
    static let addMembers = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddMembers")
    /// Image `AddSpotIcon`.
    static let addSpotIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddSpotIcon")
    /// Image `AddToSpotButton`.
    static let addToSpotButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddToSpotButton")
    /// Image `AddedToMap`.
    static let addedToMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddedToMap")
    /// Image `AlienTag`.
    static let alienTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "AlienTag")
    /// Image `AliveOff`.
    static let aliveOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "AliveOff")
    /// Image `AliveOn`.
    static let aliveOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "AliveOn")
    /// Image `AnnotationSpotTarget`.
    static let annotationSpotTarget = Rswift.ImageResource(bundle: R.hostingBundle, name: "AnnotationSpotTarget")
    /// Image `ArtTag`.
    static let artTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArtTag")
    /// Image `BackArrow-1`.
    static let backArrow1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackArrow-1")
    /// Image `BackArrowDark`.
    static let backArrowDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackArrowDark")
    /// Image `BackArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackArrow")
    /// Image `BasketballTag`.
    static let basketballTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BasketballTag")
    /// Image `Bear 2`.
    static let bear2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bear 2")
    /// Image `BearTag`.
    static let bearTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BearTag")
    /// Image `Bear`.
    static let bear = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bear")
    /// Image `BikeTag`.
    static let bikeTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BikeTag")
    /// Image `BilliardsTag`.
    static let billiardsTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BilliardsTag")
    /// Image `BirdTag`.
    static let birdTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BirdTag")
    /// Image `BlankContact`.
    static let blankContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlankContact")
    /// Image `BoatTag`.
    static let boatTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BoatTag")
    /// Image `BodegaTag`.
    static let bodegaTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BodegaTag")
    /// Image `BoogieTag`.
    static let boogieTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BoogieTag")
    /// Image `BooksTag`.
    static let booksTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BooksTag")
    /// Image `BreadTag`.
    static let breadTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BreadTag")
    /// Image `BugTag`.
    static let bugTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BugTag")
    /// Image `Bunny 2`.
    static let bunny2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bunny 2")
    /// Image `Bunny`.
    static let bunny = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bunny")
    /// Image `BurgerTag`.
    static let burgerTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "BurgerTag")
    /// Image `CactusTag`.
    static let cactusTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CactusTag")
    /// Image `CakeTag`.
    static let cakeTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CakeTag")
    /// Image `CameraButton`.
    static let cameraButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CameraButton")
    /// Image `CameraFriendButton`.
    static let cameraFriendButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CameraFriendButton")
    /// Image `CameraRotateAlt`.
    static let cameraRotateAlt = Rswift.ImageResource(bundle: R.hostingBundle, name: "CameraRotateAlt")
    /// Image `CameraShareButton`.
    static let cameraShareButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CameraShareButton")
    /// Image `CameraSpotButton`.
    static let cameraSpotButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CameraSpotButton")
    /// Image `CameraTagButton`.
    static let cameraTagButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CameraTagButton")
    /// Image `CampTag`.
    static let campTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CampTag")
    /// Image `CancelButtonDark`.
    static let cancelButtonDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "CancelButtonDark")
    /// Image `CancelButton`.
    static let cancelButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CancelButton")
    /// Image `CarTag`.
    static let carTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CarTag")
    /// Image `CardsTag`.
    static let cardsTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CardsTag")
    /// Image `CarnivalTag`.
    static let carnivalTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CarnivalTag")
    /// Image `Carot`.
    static let carot = Rswift.ImageResource(bundle: R.hostingBundle, name: "Carot")
    /// Image `CarrotTag`.
    static let carrotTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CarrotTag")
    /// Image `CasinoTag`.
    static let casinoTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CasinoTag")
    /// Image `CastleTag`.
    static let castleTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CastleTag")
    /// Image `CatTag`.
    static let catTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CatTag")
    /// Image `CheckIcon`.
    static let checkIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckIcon")
    /// Image `ChillTag`.
    static let chillTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChillTag")
    /// Image `ChooseSpotCancel`.
    static let chooseSpotCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChooseSpotCancel")
    /// Image `CigTag`.
    static let cigTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CigTag")
    /// Image `CitysetTag`.
    static let citysetTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CitysetTag")
    /// Image `CocktailTag`.
    static let cocktailTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CocktailTag")
    /// Image `CoffeeTag`.
    static let coffeeTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CoffeeTag")
    /// Image `CommentLikeButtonFilled`.
    static let commentLikeButtonFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommentLikeButtonFilled")
    /// Image `CommentLikeButton`.
    static let commentLikeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommentLikeButton")
    /// Image `CommentNotification`.
    static let commentNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommentNotification")
    /// Image `CommentSegCommentIcon`.
    static let commentSegCommentIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommentSegCommentIcon")
    /// Image `CommentSegLikeIcon`.
    static let commentSegLikeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommentSegLikeIcon")
    /// Image `CommunityGlobe`.
    static let communityGlobe = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommunityGlobe")
    /// Image `CookTag`.
    static let cookTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CookTag")
    /// Image `Cow 2`.
    static let cow2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cow 2")
    /// Image `CowTag`.
    static let cowTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CowTag")
    /// Image `Cow`.
    static let cow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cow")
    /// Image `CreamTag`.
    static let creamTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "CreamTag")
    /// Image `CreateAccountButton`.
    static let createAccountButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CreateAccountButton")
    /// Image `CreateMapButton`.
    static let createMapButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CreateMapButton")
    /// Image `DangerTag`.
    static let dangerTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "DangerTag")
    /// Image `Deer 2`.
    static let deer2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Deer 2")
    /// Image `Deer`.
    static let deer = Rswift.ImageResource(bundle: R.hostingBundle, name: "Deer")
    /// Image `Dog 2`.
    static let dog2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dog 2")
    /// Image `DogTag`.
    static let dogTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "DogTag")
    /// Image `Dog`.
    static let dog = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dog")
    /// Image `DonutTag`.
    static let donutTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "DonutTag")
    /// Image `DownCarat`.
    static let downCarat = Rswift.ImageResource(bundle: R.hostingBundle, name: "DownCarat")
    /// Image `DrinkTag`.
    static let drinkTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "DrinkTag")
    /// Image `EatTag`.
    static let eatTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "EatTag")
    /// Image `EditAvatar`.
    static let editAvatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditAvatar")
    /// Image `EditProfilePicture`.
    static let editProfilePicture = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditProfilePicture")
    /// Image `EggTag`.
    static let eggTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "EggTag")
    /// Image `Elephant 2`.
    static let elephant2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Elephant 2")
    /// Image `Elephant`.
    static let elephant = Rswift.ImageResource(bundle: R.hostingBundle, name: "Elephant")
    /// Image `FeedExit`.
    static let feedExit = Rswift.ImageResource(bundle: R.hostingBundle, name: "FeedExit")
    /// Image `FeedMapIcon`.
    static let feedMapIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FeedMapIcon")
    /// Image `FeedSpotIcon`.
    static let feedSpotIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FeedSpotIcon")
    /// Image `FishTag`.
    static let fishTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "FishTag")
    /// Image `FlashOff`.
    static let flashOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashOff")
    /// Image `FlashOn`.
    static let flashOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashOn")
    /// Image `FlowerTag`.
    static let flowerTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlowerTag")
    /// Image `FocusLockButton`.
    static let focusLockButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "FocusLockButton")
    /// Image `FriendNotification`.
    static let friendNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendNotification")
    /// Image `FriendsEmptyState`.
    static let friendsEmptyState = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsEmptyState")
    /// Image `FriendsFeedIcon`.
    static let friendsFeedIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsFeedIcon")
    /// Image `FriendsIcon`.
    static let friendsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsIcon")
    /// Image `FriendsListAddFriends`.
    static let friendsListAddFriends = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsListAddFriends")
    /// Image `FriendsMapSelected`.
    static let friendsMapSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsMapSelected")
    /// Image `FriendsMapUnselected`.
    static let friendsMapUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsMapUnselected")
    /// Image `FriendsPendingIcon`.
    static let friendsPendingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriendsPendingIcon")
    /// Image `Friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "Friends")
    /// Image `FriesTag`.
    static let friesTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "FriesTag")
    /// Image `GIFCameraButton`.
    static let gifCameraButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "GIFCameraButton")
    /// Image `GardenTag`.
    static let gardenTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "GardenTag")
    /// Image `GasTag`.
    static let gasTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "GasTag")
    /// Image `Giraffe 2`.
    static let giraffe2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Giraffe 2")
    /// Image `Giraffe`.
    static let giraffe = Rswift.ImageResource(bundle: R.hostingBundle, name: "Giraffe")
    /// Image `GlizzyTag`.
    static let glizzyTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "GlizzyTag")
    /// Image `GolfTag`.
    static let golfTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "GolfTag")
    /// Image `GreenLoadingIcon`.
    static let greenLoadingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "GreenLoadingIcon")
    /// Image `HeelsMapPopUp`.
    static let heelsMapPopUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeelsMapPopUp")
    /// Image `HeelsTag`.
    static let heelsTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeelsTag")
    /// Image `HeelsmapCover`.
    static let heelsmapCover = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeelsmapCover")
    /// Image `HistoryTag`.
    static let historyTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "HistoryTag")
    /// Image `HomeLockIcon`.
    static let homeLockIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeLockIcon")
    /// Image `HomeTag`.
    static let homeTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeTag")
    /// Image `HoneyTag`.
    static let honeyTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "HoneyTag")
    /// Image `InviteContactButton`.
    static let inviteContactButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "InviteContactButton")
    /// Image `InviteFriends`.
    static let inviteFriends = Rswift.ImageResource(bundle: R.hostingBundle, name: "InviteFriends")
    /// Image `InvitedContact`.
    static let invitedContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvitedContact")
    /// Image `JoinedContact`.
    static let joinedContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "JoinedContact")
    /// Image `LandingPage0`.
    static let landingPage0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LandingPage0")
    /// Image `LandingPage1`.
    static let landingPage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LandingPage1")
    /// Image `LandingPage2`.
    static let landingPage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LandingPage2")
    /// Image `LandingPage3`.
    static let landingPage3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LandingPage3")
    /// Image `LandingPage4`.
    static let landingPage4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LandingPage4")
    /// Image `LandingPageLogo`.
    static let landingPageLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "LandingPageLogo")
    /// Image `LeafTag`.
    static let leafTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "LeafTag")
    /// Image `LikeButtonFilled`.
    static let likeButtonFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "LikeButtonFilled")
    /// Image `LikeNotification`.
    static let likeNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "LikeNotification")
    /// Image `LikedYourMap`.
    static let likedYourMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "LikedYourMap")
    /// Image `Lion 2`.
    static let lion2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lion 2")
    /// Image `Lion`.
    static let lion = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lion")
    /// Image `LiquorTag`.
    static let liquorTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "LiquorTag")
    /// Image `LoadingIndicator`.
    static let loadingIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoadingIndicator")
    /// Image `LocationIcon`.
    static let locationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LocationIcon")
    /// Image `LogTag`.
    static let logTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "LogTag")
    /// Image `LoginButton`.
    static let loginButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginButton")
    /// Image `LoginWithEmail`.
    static let loginWithEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginWithEmail")
    /// Image `LoginWithPhone`.
    static let loginWithPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginWithPhone")
    /// Image `MapFeedMinimize`.
    static let mapFeedMinimize = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapFeedMinimize")
    /// Image `MapToggleOff`.
    static let mapToggleOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapToggleOff")
    /// Image `MapToggleOn`.
    static let mapToggleOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "MapToggleOn")
    /// Image `MeatTag`.
    static let meatTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "MeatTag")
    /// Image `MoneyTag`.
    static let moneyTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoneyTag")
    /// Image `Monkey-2 2`.
    static let monkey22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Monkey-2 2")
    /// Image `Monkey-2`.
    static let monkey2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Monkey-2")
    /// Image `MonkeyTag`.
    static let monkeyTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "MonkeyTag")
    /// Image `Monkey`.
    static let monkey = Rswift.ImageResource(bundle: R.hostingBundle, name: "Monkey")
    /// Image `MoonTag`.
    static let moonTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoonTag")
    /// Image `MountainTag`.
    static let mountainTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "MountainTag")
    /// Image `MusicTag`.
    static let musicTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "MusicTag")
    /// Image `NSFWTag`.
    static let nsfwTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "NSFWTag")
    /// Image `NatureTag`.
    static let natureTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "NatureTag")
    /// Image `NewPostBackground`.
    static let newPostBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewPostBackground")
    /// Image `NewPostsIcon`.
    static let newPostsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewPostsIcon")
    /// Image `NewSpotIcon`.
    static let newSpotIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewSpotIcon")
    /// Image `NextArrow`.
    static let nextArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "NextArrow")
    /// Image `NotificationsNavIcon`.
    static let notificationsNavIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "NotificationsNavIcon")
    /// Image `OnboardB0t`.
    static let onboardB0t = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnboardB0t")
    /// Image `OnboardNextButton`.
    static let onboardNextButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnboardNextButton")
    /// Image `OnboardSearchContactsButton`.
    static let onboardSearchContactsButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnboardSearchContactsButton")
    /// Image `Panda 2`.
    static let panda2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Panda 2")
    /// Image `Panda`.
    static let panda = Rswift.ImageResource(bundle: R.hostingBundle, name: "Panda")
    /// Image `ParkTag`.
    static let parkTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkTag")
    /// Image `PhotoGalleryButton`.
    static let photoGalleryButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "PhotoGalleryButton")
    /// Image `Pig`.
    static let pig = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pig")
    /// Image `PillsTag`.
    static let pillsTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "PillsTag")
    /// Image `PirateTag`.
    static let pirateTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "PirateTag")
    /// Image `PizzaTag`.
    static let pizzaTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "PizzaTag")
    /// Image `PlainSpotIcon`.
    static let plainSpotIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlainSpotIcon")
    /// Image `PlaneTag`.
    static let planeTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlaneTag")
    /// Image `PlusIcon`.
    static let plusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlusIcon")
    /// Image `PostCommentButton`.
    static let postCommentButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostCommentButton")
    /// Image `PostIcon`.
    static let postIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostIcon")
    /// Image `PostInfoFriendsSelected`.
    static let postInfoFriendsSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostInfoFriendsSelected")
    /// Image `PostInfoFriendsUnselected`.
    static let postInfoFriendsUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostInfoFriendsUnselected")
    /// Image `PostInfoSpotsSelected`.
    static let postInfoSpotsSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostInfoSpotsSelected")
    /// Image `PostInfoSpotsUnselected`.
    static let postInfoSpotsUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostInfoSpotsUnselected")
    /// Image `PostInfoTagsSelected`.
    static let postInfoTagsSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostInfoTagsSelected")
    /// Image `PostInfoTagsUnselected`.
    static let postInfoTagsUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostInfoTagsUnselected")
    /// Image `PostNotification`.
    static let postNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "PostNotification")
    /// Image `PreviewGif`.
    static let previewGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "PreviewGif")
    /// Image `PrivateMapOff`.
    static let privateMapOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrivateMapOff")
    /// Image `PrivateMapOn`.
    static let privateMapOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrivateMapOn")
    /// Image `PrivateMap`.
    static let privateMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrivateMap")
    /// Image `PrivateNotiIcon`.
    static let privateNotiIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrivateNotiIcon")
    /// Image `ProfileCityIcon`.
    static let profileCityIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileCityIcon")
    /// Image `ProfileLocation`.
    static let profileLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileLocation")
    /// Image `ProfileNavIcon`.
    static let profileNavIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileNavIcon")
    /// Image `PublicMapSelected`.
    static let publicMapSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PublicMapSelected")
    /// Image `PublicMapUnselected`.
    static let publicMapUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PublicMapUnselected")
    /// Image `PublicSubmissionAccepted`.
    static let publicSubmissionAccepted = Rswift.ImageResource(bundle: R.hostingBundle, name: "PublicSubmissionAccepted")
    /// Image `PublicSubmissionDenied`.
    static let publicSubmissionDenied = Rswift.ImageResource(bundle: R.hostingBundle, name: "PublicSubmissionDenied")
    /// Image `RaceTag`.
    static let raceTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "RaceTag")
    /// Image `RainbowTag`.
    static let rainbowTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "RainbowTag")
    /// Image `ReaperTag`.
    static let reaperTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ReaperTag")
    /// Image `RefreshIcon`.
    static let refreshIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "RefreshIcon")
    /// Image `ReplayIcon`.
    static let replayIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ReplayIcon")
    /// Image `ReportSpotButton`.
    static let reportSpotButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ReportSpotButton")
    /// Image `SaladTag`.
    static let saladTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SaladTag")
    /// Image `SearchContactsIcon`.
    static let searchContactsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchContactsIcon")
    /// Image `SearchContacts`.
    static let searchContacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchContacts")
    /// Image `SearchNavIcon`.
    static let searchNavIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchNavIcon")
    /// Image `SecretMap`.
    static let secretMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "SecretMap")
    /// Image `SeenPostBackground`.
    static let seenPostBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "SeenPostBackground")
    /// Image `SelectButton`.
    static let selectButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "SelectButton")
    /// Image `SelectedButton`.
    static let selectedButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "SelectedButton")
    /// Image `SendCodeButton`.
    static let sendCodeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "SendCodeButton")
    /// Image `SendInvitesIcon`.
    static let sendInvitesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SendInvitesIcon")
    /// Image `SendLinkButton`.
    static let sendLinkButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "SendLinkButton")
    /// Image `SettingsIcon`.
    static let settingsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingsIcon")
    /// Image `ShareButton`.
    static let shareButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShareButton")
    /// Image `ShopTag`.
    static let shopTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShopTag")
    /// Image `SideCarat`.
    static let sideCarat = Rswift.ImageResource(bundle: R.hostingBundle, name: "SideCarat")
    /// Image `Signuplogo`.
    static let signuplogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Signuplogo")
    /// Image `SingleUserIcon`.
    static let singleUserIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SingleUserIcon")
    /// Image `SirenTag`.
    static let sirenTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SirenTag")
    /// Image `SkateTag`.
    static let skateTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SkateTag")
    /// Image `SkiTag`.
    static let skiTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SkiTag")
    /// Image `SkyscraperTag`.
    static let skyscraperTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SkyscraperTag")
    /// Image `SmokeTag`.
    static let smokeTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SmokeTag")
    /// Image `SnakeTag`.
    static let snakeTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SnakeTag")
    /// Image `SnowTag`.
    static let snowTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SnowTag")
    /// Image `StarTag`.
    static let starTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarTag")
    /// Image `StrawberryTag`.
    static let strawberryTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "StrawberryTag")
    /// Image `SuitcaseTag`.
    static let suitcaseTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SuitcaseTag")
    /// Image `SunsetTag`.
    static let sunsetTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SunsetTag")
    /// Image `SurfTag`.
    static let surfTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SurfTag")
    /// Image `SushiTag`.
    static let sushiTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SushiTag")
    /// Image `SwimTag`.
    static let swimTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "SwimTag")
    /// Image `TacoTag`.
    static let tacoTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "TacoTag")
    /// Image `TapFocusIndicator`.
    static let tapFocusIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "TapFocusIndicator")
    /// Image `TeaTag`.
    static let teaTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "TeaTag")
    /// Image `TennisTag`.
    static let tennisTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "TennisTag")
    /// Image `TheB0t`.
    static let theB0t = Rswift.ImageResource(bundle: R.hostingBundle, name: "TheB0t")
    /// Image `Tiger 2`.
    static let tiger2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tiger 2")
    /// Image `Tiger`.
    static let tiger = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tiger")
    /// Image `ToggleOff`.
    static let toggleOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToggleOff")
    /// Image `ToggleOn`.
    static let toggleOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToggleOn")
    /// Image `ToiletTag`.
    static let toiletTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToiletTag")
    /// Image `TrainTag`.
    static let trainTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "TrainTag")
    /// Image `TropicalTag`.
    static let tropicalTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "TropicalTag")
    /// Image `UmbrellaTag`.
    static let umbrellaTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "UmbrellaTag")
    /// Image `UserLocationButton`.
    static let userLocationButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "UserLocationButton")
    /// Image `UsernameAvailable`.
    static let usernameAvailable = Rswift.ImageResource(bundle: R.hostingBundle, name: "UsernameAvailable")
    /// Image `UsernameTaken`.
    static let usernameTaken = Rswift.ImageResource(bundle: R.hostingBundle, name: "UsernameTaken")
    /// Image `UsersMapNotFriends`.
    static let usersMapNotFriends = Rswift.ImageResource(bundle: R.hostingBundle, name: "UsersMapNotFriends")
    /// Image `Vector`.
    static let vector = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector")
    /// Image `ViewTag`.
    static let viewTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ViewTag")
    /// Image `WeirdTag`.
    static let weirdTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "WeirdTag")
    /// Image `WhaleTag`.
    static let whaleTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhaleTag")
    /// Image `WineTag`.
    static let wineTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "WineTag")
    /// Image `XFriendRequest`.
    static let xFriendRequest = Rswift.ImageResource(bundle: R.hostingBundle, name: "XFriendRequest")
    /// Image `X`.
    static let x = Rswift.ImageResource(bundle: R.hostingBundle, name: "X")
    /// Image `commentButton`.
    static let commentButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentButton")
    /// Image `cowDance`.
    static let cowDance = Rswift.ImageResource(bundle: R.hostingBundle, name: "cowDance")
    /// Image `giraffeDance`.
    static let giraffeDance = Rswift.ImageResource(bundle: R.hostingBundle, name: "giraffeDance")
    /// Image `likeButton`.
    static let likeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeButton")
    /// Image `lionDance`.
    static let lionDance = Rswift.ImageResource(bundle: R.hostingBundle, name: "lionDance")
    /// Image `pigDance`.
    static let pigDance = Rswift.ImageResource(bundle: R.hostingBundle, name: "pigDance")
    /// Image `sp0tLogo 2`.
    static let sp0tLogo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sp0tLogo 2")
    /// Image `sp0tLogo`.
    static let sp0tLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "sp0tLogo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AcceptedTheirFriendRequest", bundle: ..., traitCollection: ...)`
    static func acceptedTheirFriendRequest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.acceptedTheirFriendRequest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AcceptedYourFriendRequest", bundle: ..., traitCollection: ...)`
    static func acceptedYourFriendRequest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.acceptedYourFriendRequest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ActiveTag", bundle: ..., traitCollection: ...)`
    static func activeTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activeTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddCollaboratorsButton", bundle: ..., traitCollection: ...)`
    static func addCollaboratorsButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addCollaboratorsButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddFriendIcon", bundle: ..., traitCollection: ...)`
    static func addFriendIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFriendIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddMembers", bundle: ..., traitCollection: ...)`
    static func addMembers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addMembers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddSpotIcon", bundle: ..., traitCollection: ...)`
    static func addSpotIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addSpotIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddToSpotButton", bundle: ..., traitCollection: ...)`
    static func addToSpotButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addToSpotButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddedToMap", bundle: ..., traitCollection: ...)`
    static func addedToMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addedToMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AlienTag", bundle: ..., traitCollection: ...)`
    static func alienTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alienTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AliveOff", bundle: ..., traitCollection: ...)`
    static func aliveOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aliveOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AliveOn", bundle: ..., traitCollection: ...)`
    static func aliveOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aliveOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AnnotationSpotTarget", bundle: ..., traitCollection: ...)`
    static func annotationSpotTarget(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.annotationSpotTarget, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArtTag", bundle: ..., traitCollection: ...)`
    static func artTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.artTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackArrow-1", bundle: ..., traitCollection: ...)`
    static func backArrow1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackArrowDark", bundle: ..., traitCollection: ...)`
    static func backArrowDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrowDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BasketballTag", bundle: ..., traitCollection: ...)`
    static func basketballTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.basketballTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bear 2", bundle: ..., traitCollection: ...)`
    static func bear2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bear2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bear", bundle: ..., traitCollection: ...)`
    static func bear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BearTag", bundle: ..., traitCollection: ...)`
    static func bearTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bearTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BikeTag", bundle: ..., traitCollection: ...)`
    static func bikeTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bikeTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BilliardsTag", bundle: ..., traitCollection: ...)`
    static func billiardsTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.billiardsTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BirdTag", bundle: ..., traitCollection: ...)`
    static func birdTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birdTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BlankContact", bundle: ..., traitCollection: ...)`
    static func blankContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blankContact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BoatTag", bundle: ..., traitCollection: ...)`
    static func boatTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boatTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BodegaTag", bundle: ..., traitCollection: ...)`
    static func bodegaTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bodegaTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BoogieTag", bundle: ..., traitCollection: ...)`
    static func boogieTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boogieTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BooksTag", bundle: ..., traitCollection: ...)`
    static func booksTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booksTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BreadTag", bundle: ..., traitCollection: ...)`
    static func breadTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.breadTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BugTag", bundle: ..., traitCollection: ...)`
    static func bugTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bugTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bunny 2", bundle: ..., traitCollection: ...)`
    static func bunny2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bunny2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bunny", bundle: ..., traitCollection: ...)`
    static func bunny(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bunny, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BurgerTag", bundle: ..., traitCollection: ...)`
    static func burgerTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burgerTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CactusTag", bundle: ..., traitCollection: ...)`
    static func cactusTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cactusTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CakeTag", bundle: ..., traitCollection: ...)`
    static func cakeTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cakeTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CameraButton", bundle: ..., traitCollection: ...)`
    static func cameraButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CameraFriendButton", bundle: ..., traitCollection: ...)`
    static func cameraFriendButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraFriendButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CameraRotateAlt", bundle: ..., traitCollection: ...)`
    static func cameraRotateAlt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraRotateAlt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CameraShareButton", bundle: ..., traitCollection: ...)`
    static func cameraShareButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraShareButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CameraSpotButton", bundle: ..., traitCollection: ...)`
    static func cameraSpotButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraSpotButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CameraTagButton", bundle: ..., traitCollection: ...)`
    static func cameraTagButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraTagButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CampTag", bundle: ..., traitCollection: ...)`
    static func campTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.campTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CancelButton", bundle: ..., traitCollection: ...)`
    static func cancelButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CancelButtonDark", bundle: ..., traitCollection: ...)`
    static func cancelButtonDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelButtonDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CarTag", bundle: ..., traitCollection: ...)`
    static func carTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CardsTag", bundle: ..., traitCollection: ...)`
    static func cardsTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardsTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CarnivalTag", bundle: ..., traitCollection: ...)`
    static func carnivalTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carnivalTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Carot", bundle: ..., traitCollection: ...)`
    static func carot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CarrotTag", bundle: ..., traitCollection: ...)`
    static func carrotTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carrotTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CasinoTag", bundle: ..., traitCollection: ...)`
    static func casinoTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.casinoTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CastleTag", bundle: ..., traitCollection: ...)`
    static func castleTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.castleTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CatTag", bundle: ..., traitCollection: ...)`
    static func catTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CheckIcon", bundle: ..., traitCollection: ...)`
    static func checkIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ChillTag", bundle: ..., traitCollection: ...)`
    static func chillTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chillTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ChooseSpotCancel", bundle: ..., traitCollection: ...)`
    static func chooseSpotCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chooseSpotCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CigTag", bundle: ..., traitCollection: ...)`
    static func cigTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cigTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CitysetTag", bundle: ..., traitCollection: ...)`
    static func citysetTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.citysetTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CocktailTag", bundle: ..., traitCollection: ...)`
    static func cocktailTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cocktailTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CoffeeTag", bundle: ..., traitCollection: ...)`
    static func coffeeTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coffeeTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CommentLikeButton", bundle: ..., traitCollection: ...)`
    static func commentLikeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentLikeButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CommentLikeButtonFilled", bundle: ..., traitCollection: ...)`
    static func commentLikeButtonFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentLikeButtonFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CommentNotification", bundle: ..., traitCollection: ...)`
    static func commentNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CommentSegCommentIcon", bundle: ..., traitCollection: ...)`
    static func commentSegCommentIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentSegCommentIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CommentSegLikeIcon", bundle: ..., traitCollection: ...)`
    static func commentSegLikeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentSegLikeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CommunityGlobe", bundle: ..., traitCollection: ...)`
    static func communityGlobe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.communityGlobe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CookTag", bundle: ..., traitCollection: ...)`
    static func cookTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cookTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cow 2", bundle: ..., traitCollection: ...)`
    static func cow2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cow2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cow", bundle: ..., traitCollection: ...)`
    static func cow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CowTag", bundle: ..., traitCollection: ...)`
    static func cowTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cowTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CreamTag", bundle: ..., traitCollection: ...)`
    static func creamTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creamTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CreateAccountButton", bundle: ..., traitCollection: ...)`
    static func createAccountButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.createAccountButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CreateMapButton", bundle: ..., traitCollection: ...)`
    static func createMapButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.createMapButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DangerTag", bundle: ..., traitCollection: ...)`
    static func dangerTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dangerTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Deer 2", bundle: ..., traitCollection: ...)`
    static func deer2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deer2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Deer", bundle: ..., traitCollection: ...)`
    static func deer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dog 2", bundle: ..., traitCollection: ...)`
    static func dog2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dog2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dog", bundle: ..., traitCollection: ...)`
    static func dog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DogTag", bundle: ..., traitCollection: ...)`
    static func dogTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dogTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DonutTag", bundle: ..., traitCollection: ...)`
    static func donutTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.donutTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DownCarat", bundle: ..., traitCollection: ...)`
    static func downCarat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downCarat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DrinkTag", bundle: ..., traitCollection: ...)`
    static func drinkTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drinkTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EatTag", bundle: ..., traitCollection: ...)`
    static func eatTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eatTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditAvatar", bundle: ..., traitCollection: ...)`
    static func editAvatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editAvatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditProfilePicture", bundle: ..., traitCollection: ...)`
    static func editProfilePicture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editProfilePicture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EggTag", bundle: ..., traitCollection: ...)`
    static func eggTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eggTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Elephant 2", bundle: ..., traitCollection: ...)`
    static func elephant2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.elephant2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Elephant", bundle: ..., traitCollection: ...)`
    static func elephant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.elephant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FeedExit", bundle: ..., traitCollection: ...)`
    static func feedExit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedExit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FeedMapIcon", bundle: ..., traitCollection: ...)`
    static func feedMapIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedMapIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FeedSpotIcon", bundle: ..., traitCollection: ...)`
    static func feedSpotIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedSpotIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FishTag", bundle: ..., traitCollection: ...)`
    static func fishTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fishTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FlashOff", bundle: ..., traitCollection: ...)`
    static func flashOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FlashOn", bundle: ..., traitCollection: ...)`
    static func flashOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FlowerTag", bundle: ..., traitCollection: ...)`
    static func flowerTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flowerTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FocusLockButton", bundle: ..., traitCollection: ...)`
    static func focusLockButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.focusLockButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendNotification", bundle: ..., traitCollection: ...)`
    static func friendNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendsEmptyState", bundle: ..., traitCollection: ...)`
    static func friendsEmptyState(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsEmptyState, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendsFeedIcon", bundle: ..., traitCollection: ...)`
    static func friendsFeedIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsFeedIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendsIcon", bundle: ..., traitCollection: ...)`
    static func friendsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendsListAddFriends", bundle: ..., traitCollection: ...)`
    static func friendsListAddFriends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsListAddFriends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendsMapSelected", bundle: ..., traitCollection: ...)`
    static func friendsMapSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsMapSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendsMapUnselected", bundle: ..., traitCollection: ...)`
    static func friendsMapUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsMapUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriendsPendingIcon", bundle: ..., traitCollection: ...)`
    static func friendsPendingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friendsPendingIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FriesTag", bundle: ..., traitCollection: ...)`
    static func friesTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friesTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GIFCameraButton", bundle: ..., traitCollection: ...)`
    static func gifCameraButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gifCameraButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GardenTag", bundle: ..., traitCollection: ...)`
    static func gardenTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gardenTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GasTag", bundle: ..., traitCollection: ...)`
    static func gasTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gasTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Giraffe 2", bundle: ..., traitCollection: ...)`
    static func giraffe2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.giraffe2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Giraffe", bundle: ..., traitCollection: ...)`
    static func giraffe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.giraffe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GlizzyTag", bundle: ..., traitCollection: ...)`
    static func glizzyTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glizzyTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GolfTag", bundle: ..., traitCollection: ...)`
    static func golfTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.golfTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GreenLoadingIcon", bundle: ..., traitCollection: ...)`
    static func greenLoadingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenLoadingIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeelsMapPopUp", bundle: ..., traitCollection: ...)`
    static func heelsMapPopUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heelsMapPopUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeelsTag", bundle: ..., traitCollection: ...)`
    static func heelsTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heelsTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeelsmapCover", bundle: ..., traitCollection: ...)`
    static func heelsmapCover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heelsmapCover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HistoryTag", bundle: ..., traitCollection: ...)`
    static func historyTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historyTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HomeLockIcon", bundle: ..., traitCollection: ...)`
    static func homeLockIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeLockIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HomeTag", bundle: ..., traitCollection: ...)`
    static func homeTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HoneyTag", bundle: ..., traitCollection: ...)`
    static func honeyTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.honeyTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "InviteContactButton", bundle: ..., traitCollection: ...)`
    static func inviteContactButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inviteContactButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "InviteFriends", bundle: ..., traitCollection: ...)`
    static func inviteFriends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inviteFriends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "InvitedContact", bundle: ..., traitCollection: ...)`
    static func invitedContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invitedContact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "JoinedContact", bundle: ..., traitCollection: ...)`
    static func joinedContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.joinedContact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LandingPage0", bundle: ..., traitCollection: ...)`
    static func landingPage0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.landingPage0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LandingPage1", bundle: ..., traitCollection: ...)`
    static func landingPage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.landingPage1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LandingPage2", bundle: ..., traitCollection: ...)`
    static func landingPage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.landingPage2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LandingPage3", bundle: ..., traitCollection: ...)`
    static func landingPage3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.landingPage3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LandingPage4", bundle: ..., traitCollection: ...)`
    static func landingPage4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.landingPage4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LandingPageLogo", bundle: ..., traitCollection: ...)`
    static func landingPageLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.landingPageLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LeafTag", bundle: ..., traitCollection: ...)`
    static func leafTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leafTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LikeButtonFilled", bundle: ..., traitCollection: ...)`
    static func likeButtonFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeButtonFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LikeNotification", bundle: ..., traitCollection: ...)`
    static func likeNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LikedYourMap", bundle: ..., traitCollection: ...)`
    static func likedYourMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likedYourMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lion 2", bundle: ..., traitCollection: ...)`
    static func lion2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lion2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lion", bundle: ..., traitCollection: ...)`
    static func lion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LiquorTag", bundle: ..., traitCollection: ...)`
    static func liquorTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liquorTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoadingIndicator", bundle: ..., traitCollection: ...)`
    static func loadingIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingIndicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LocationIcon", bundle: ..., traitCollection: ...)`
    static func locationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LogTag", bundle: ..., traitCollection: ...)`
    static func logTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginButton", bundle: ..., traitCollection: ...)`
    static func loginButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginWithEmail", bundle: ..., traitCollection: ...)`
    static func loginWithEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginWithEmail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginWithPhone", bundle: ..., traitCollection: ...)`
    static func loginWithPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginWithPhone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MapFeedMinimize", bundle: ..., traitCollection: ...)`
    static func mapFeedMinimize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapFeedMinimize, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MapToggleOff", bundle: ..., traitCollection: ...)`
    static func mapToggleOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapToggleOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MapToggleOn", bundle: ..., traitCollection: ...)`
    static func mapToggleOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapToggleOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MeatTag", bundle: ..., traitCollection: ...)`
    static func meatTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meatTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoneyTag", bundle: ..., traitCollection: ...)`
    static func moneyTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Monkey", bundle: ..., traitCollection: ...)`
    static func monkey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monkey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Monkey-2 2", bundle: ..., traitCollection: ...)`
    static func monkey22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monkey22, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Monkey-2", bundle: ..., traitCollection: ...)`
    static func monkey2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monkey2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MonkeyTag", bundle: ..., traitCollection: ...)`
    static func monkeyTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monkeyTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoonTag", bundle: ..., traitCollection: ...)`
    static func moonTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moonTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MountainTag", bundle: ..., traitCollection: ...)`
    static func mountainTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mountainTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MusicTag", bundle: ..., traitCollection: ...)`
    static func musicTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.musicTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NSFWTag", bundle: ..., traitCollection: ...)`
    static func nsfwTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nsfwTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NatureTag", bundle: ..., traitCollection: ...)`
    static func natureTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.natureTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NewPostBackground", bundle: ..., traitCollection: ...)`
    static func newPostBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newPostBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NewPostsIcon", bundle: ..., traitCollection: ...)`
    static func newPostsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newPostsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NewSpotIcon", bundle: ..., traitCollection: ...)`
    static func newSpotIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newSpotIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NextArrow", bundle: ..., traitCollection: ...)`
    static func nextArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NotificationsNavIcon", bundle: ..., traitCollection: ...)`
    static func notificationsNavIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationsNavIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnboardB0t", bundle: ..., traitCollection: ...)`
    static func onboardB0t(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardB0t, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnboardNextButton", bundle: ..., traitCollection: ...)`
    static func onboardNextButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardNextButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnboardSearchContactsButton", bundle: ..., traitCollection: ...)`
    static func onboardSearchContactsButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardSearchContactsButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Panda 2", bundle: ..., traitCollection: ...)`
    static func panda2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.panda2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Panda", bundle: ..., traitCollection: ...)`
    static func panda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.panda, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkTag", bundle: ..., traitCollection: ...)`
    static func parkTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PhotoGalleryButton", bundle: ..., traitCollection: ...)`
    static func photoGalleryButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoGalleryButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pig", bundle: ..., traitCollection: ...)`
    static func pig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PillsTag", bundle: ..., traitCollection: ...)`
    static func pillsTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pillsTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PirateTag", bundle: ..., traitCollection: ...)`
    static func pirateTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pirateTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PizzaTag", bundle: ..., traitCollection: ...)`
    static func pizzaTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pizzaTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PlainSpotIcon", bundle: ..., traitCollection: ...)`
    static func plainSpotIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plainSpotIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PlaneTag", bundle: ..., traitCollection: ...)`
    static func planeTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.planeTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PlusIcon", bundle: ..., traitCollection: ...)`
    static func plusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostCommentButton", bundle: ..., traitCollection: ...)`
    static func postCommentButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postCommentButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostIcon", bundle: ..., traitCollection: ...)`
    static func postIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostInfoFriendsSelected", bundle: ..., traitCollection: ...)`
    static func postInfoFriendsSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postInfoFriendsSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostInfoFriendsUnselected", bundle: ..., traitCollection: ...)`
    static func postInfoFriendsUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postInfoFriendsUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostInfoSpotsSelected", bundle: ..., traitCollection: ...)`
    static func postInfoSpotsSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postInfoSpotsSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostInfoSpotsUnselected", bundle: ..., traitCollection: ...)`
    static func postInfoSpotsUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postInfoSpotsUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostInfoTagsSelected", bundle: ..., traitCollection: ...)`
    static func postInfoTagsSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postInfoTagsSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostInfoTagsUnselected", bundle: ..., traitCollection: ...)`
    static func postInfoTagsUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postInfoTagsUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PostNotification", bundle: ..., traitCollection: ...)`
    static func postNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PreviewGif", bundle: ..., traitCollection: ...)`
    static func previewGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.previewGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PrivateMap", bundle: ..., traitCollection: ...)`
    static func privateMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privateMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PrivateMapOff", bundle: ..., traitCollection: ...)`
    static func privateMapOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privateMapOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PrivateMapOn", bundle: ..., traitCollection: ...)`
    static func privateMapOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privateMapOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PrivateNotiIcon", bundle: ..., traitCollection: ...)`
    static func privateNotiIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privateNotiIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileCityIcon", bundle: ..., traitCollection: ...)`
    static func profileCityIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileCityIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileLocation", bundle: ..., traitCollection: ...)`
    static func profileLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileNavIcon", bundle: ..., traitCollection: ...)`
    static func profileNavIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileNavIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PublicMapSelected", bundle: ..., traitCollection: ...)`
    static func publicMapSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.publicMapSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PublicMapUnselected", bundle: ..., traitCollection: ...)`
    static func publicMapUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.publicMapUnselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PublicSubmissionAccepted", bundle: ..., traitCollection: ...)`
    static func publicSubmissionAccepted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.publicSubmissionAccepted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PublicSubmissionDenied", bundle: ..., traitCollection: ...)`
    static func publicSubmissionDenied(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.publicSubmissionDenied, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RaceTag", bundle: ..., traitCollection: ...)`
    static func raceTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.raceTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RainbowTag", bundle: ..., traitCollection: ...)`
    static func rainbowTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rainbowTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ReaperTag", bundle: ..., traitCollection: ...)`
    static func reaperTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reaperTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RefreshIcon", bundle: ..., traitCollection: ...)`
    static func refreshIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refreshIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ReplayIcon", bundle: ..., traitCollection: ...)`
    static func replayIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.replayIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ReportSpotButton", bundle: ..., traitCollection: ...)`
    static func reportSpotButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reportSpotButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SaladTag", bundle: ..., traitCollection: ...)`
    static func saladTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.saladTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchContacts", bundle: ..., traitCollection: ...)`
    static func searchContacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchContacts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchContactsIcon", bundle: ..., traitCollection: ...)`
    static func searchContactsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchContactsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchNavIcon", bundle: ..., traitCollection: ...)`
    static func searchNavIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchNavIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SecretMap", bundle: ..., traitCollection: ...)`
    static func secretMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.secretMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SeenPostBackground", bundle: ..., traitCollection: ...)`
    static func seenPostBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seenPostBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SelectButton", bundle: ..., traitCollection: ...)`
    static func selectButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SelectedButton", bundle: ..., traitCollection: ...)`
    static func selectedButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SendCodeButton", bundle: ..., traitCollection: ...)`
    static func sendCodeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendCodeButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SendInvitesIcon", bundle: ..., traitCollection: ...)`
    static func sendInvitesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendInvitesIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SendLinkButton", bundle: ..., traitCollection: ...)`
    static func sendLinkButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendLinkButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingsIcon", bundle: ..., traitCollection: ...)`
    static func settingsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShareButton", bundle: ..., traitCollection: ...)`
    static func shareButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShopTag", bundle: ..., traitCollection: ...)`
    static func shopTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SideCarat", bundle: ..., traitCollection: ...)`
    static func sideCarat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sideCarat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Signuplogo", bundle: ..., traitCollection: ...)`
    static func signuplogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signuplogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SingleUserIcon", bundle: ..., traitCollection: ...)`
    static func singleUserIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.singleUserIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SirenTag", bundle: ..., traitCollection: ...)`
    static func sirenTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sirenTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SkateTag", bundle: ..., traitCollection: ...)`
    static func skateTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skateTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SkiTag", bundle: ..., traitCollection: ...)`
    static func skiTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skiTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SkyscraperTag", bundle: ..., traitCollection: ...)`
    static func skyscraperTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skyscraperTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SmokeTag", bundle: ..., traitCollection: ...)`
    static func smokeTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smokeTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SnakeTag", bundle: ..., traitCollection: ...)`
    static func snakeTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snakeTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SnowTag", bundle: ..., traitCollection: ...)`
    static func snowTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarTag", bundle: ..., traitCollection: ...)`
    static func starTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StrawberryTag", bundle: ..., traitCollection: ...)`
    static func strawberryTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.strawberryTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SuitcaseTag", bundle: ..., traitCollection: ...)`
    static func suitcaseTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.suitcaseTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SunsetTag", bundle: ..., traitCollection: ...)`
    static func sunsetTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunsetTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SurfTag", bundle: ..., traitCollection: ...)`
    static func surfTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.surfTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SushiTag", bundle: ..., traitCollection: ...)`
    static func sushiTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sushiTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SwimTag", bundle: ..., traitCollection: ...)`
    static func swimTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.swimTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TacoTag", bundle: ..., traitCollection: ...)`
    static func tacoTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tacoTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TapFocusIndicator", bundle: ..., traitCollection: ...)`
    static func tapFocusIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tapFocusIndicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TeaTag", bundle: ..., traitCollection: ...)`
    static func teaTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teaTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TennisTag", bundle: ..., traitCollection: ...)`
    static func tennisTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tennisTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TheB0t", bundle: ..., traitCollection: ...)`
    static func theB0t(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theB0t, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tiger 2", bundle: ..., traitCollection: ...)`
    static func tiger2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tiger2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tiger", bundle: ..., traitCollection: ...)`
    static func tiger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tiger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToggleOff", bundle: ..., traitCollection: ...)`
    static func toggleOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toggleOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToggleOn", bundle: ..., traitCollection: ...)`
    static func toggleOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toggleOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToiletTag", bundle: ..., traitCollection: ...)`
    static func toiletTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toiletTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TrainTag", bundle: ..., traitCollection: ...)`
    static func trainTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trainTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TropicalTag", bundle: ..., traitCollection: ...)`
    static func tropicalTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tropicalTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UmbrellaTag", bundle: ..., traitCollection: ...)`
    static func umbrellaTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.umbrellaTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UserLocationButton", bundle: ..., traitCollection: ...)`
    static func userLocationButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userLocationButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UsernameAvailable", bundle: ..., traitCollection: ...)`
    static func usernameAvailable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usernameAvailable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UsernameTaken", bundle: ..., traitCollection: ...)`
    static func usernameTaken(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usernameTaken, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UsersMapNotFriends", bundle: ..., traitCollection: ...)`
    static func usersMapNotFriends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usersMapNotFriends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector", bundle: ..., traitCollection: ...)`
    static func vector(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ViewTag", bundle: ..., traitCollection: ...)`
    static func viewTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.viewTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WeirdTag", bundle: ..., traitCollection: ...)`
    static func weirdTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weirdTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WhaleTag", bundle: ..., traitCollection: ...)`
    static func whaleTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whaleTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WineTag", bundle: ..., traitCollection: ...)`
    static func wineTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wineTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "X", bundle: ..., traitCollection: ...)`
    static func x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "XFriendRequest", bundle: ..., traitCollection: ...)`
    static func xFriendRequest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xFriendRequest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "commentButton", bundle: ..., traitCollection: ...)`
    static func commentButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cowDance", bundle: ..., traitCollection: ...)`
    static func cowDance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cowDance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "giraffeDance", bundle: ..., traitCollection: ...)`
    static func giraffeDance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.giraffeDance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "likeButton", bundle: ..., traitCollection: ...)`
    static func likeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lionDance", bundle: ..., traitCollection: ...)`
    static func lionDance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lionDance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pigDance", bundle: ..., traitCollection: ...)`
    static func pigDance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pigDance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sp0tLogo 2", bundle: ..., traitCollection: ...)`
    static func sp0tLogo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sp0tLogo2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sp0tLogo", bundle: ..., traitCollection: ...)`
    static func sp0tLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sp0tLogo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = true

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `FriendPostView`.
    static let friendPostView = _R.nib._FriendPostView()
    /// Nib `SpotNameView`.
    static let spotNameView = _R.nib._SpotNameView()
    /// Nib `SpotPostView`.
    static let spotPostView = _R.nib._SpotPostView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FriendPostView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.friendPostView) instead")
    static func friendPostView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.friendPostView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SpotNameView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.spotNameView) instead")
    static func spotNameView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.spotNameView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SpotPostView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.spotPostView) instead")
    static func spotPostView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.spotPostView)
    }
    #endif

    static func friendPostView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FriendPostView? {
      return R.nib.friendPostView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FriendPostView
    }

    static func spotNameView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpotNameView? {
      return R.nib.spotNameView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpotNameView
    }

    static func spotPostView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpotPostView? {
      return R.nib.spotPostView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpotPostView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _FriendPostView.validate()
      try _SpotNameView.validate()
      try _SpotPostView.validate()
    }

    struct _FriendPostView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FriendPostView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FriendPostView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FriendPostView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ReplayIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ReplayIcon' is used in nib 'FriendPostView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SpotNameView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpotNameView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpotNameView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpotNameView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AnnotationSpotTarget", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AnnotationSpotTarget' is used in nib 'SpotNameView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SpotPostView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpotPostView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpotPostView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpotPostView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AnnotationSpotTarget", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AnnotationSpotTarget' is used in nib 'SpotPostView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ReplayIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ReplayIcon' is used in nib 'SpotPostView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try feed.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try map.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try notifications.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try upload.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct feed: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let comments = StoryboardViewControllerResource<CommentsController>(identifier: "Comments")
      let name = "Feed"
      let post = StoryboardViewControllerResource<PostController>(identifier: "Post")

      func comments(_: Void = ()) -> CommentsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comments)
      }

      func post(_: Void = ()) -> PostController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: post)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "SpotBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SpotBlack' is used in storyboard 'Feed', but couldn't be loaded.") }
        }
        if _R.storyboard.feed().comments() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comments' could not be loaded from storyboard 'Feed' as 'CommentsController'.") }
        if _R.storyboard.feed().post() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'post' could not be loaded from storyboard 'Feed' as 'PostController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Signuplogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Signuplogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LandingPageController

      let bundle = R.hostingBundle
      let confirmVC = StoryboardViewControllerResource<ConfirmCodeController>(identifier: "ConfirmVC")
      let contactsOverview = StoryboardViewControllerResource<ContactsOverviewController>(identifier: "ContactsOverview")
      let countryPicker = StoryboardViewControllerResource<CountryPickerController>(identifier: "CountryPicker")
      let emailLogin = StoryboardViewControllerResource<EmailLoginController>(identifier: "EmailLogin")
      let forgotPassword = StoryboardViewControllerResource<ResetViewController>(identifier: "ForgotPassword")
      let landingPage = StoryboardViewControllerResource<LandingPageController>(identifier: "LandingPage")
      let name = "Main"
      let phoneVC = StoryboardViewControllerResource<PhoneController>(identifier: "PhoneVC")
      let signUp = StoryboardViewControllerResource<SignUpController>(identifier: "SignUp")
      let usernameVC = StoryboardViewControllerResource<UsernameController>(identifier: "UsernameVC")

      func confirmVC(_: Void = ()) -> ConfirmCodeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmVC)
      }

      func contactsOverview(_: Void = ()) -> ContactsOverviewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactsOverview)
      }

      func countryPicker(_: Void = ()) -> CountryPickerController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: countryPicker)
      }

      func emailLogin(_: Void = ()) -> EmailLoginController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emailLogin)
      }

      func forgotPassword(_: Void = ()) -> ResetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPassword)
      }

      func landingPage(_: Void = ()) -> LandingPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingPage)
      }

      func phoneVC(_: Void = ()) -> PhoneController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneVC)
      }

      func signUp(_: Void = ()) -> SignUpController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUp)
      }

      func usernameVC(_: Void = ()) -> UsernameController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: usernameVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "SpotBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SpotBlack' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().confirmVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmVC' could not be loaded from storyboard 'Main' as 'ConfirmCodeController'.") }
        if _R.storyboard.main().contactsOverview() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactsOverview' could not be loaded from storyboard 'Main' as 'ContactsOverviewController'.") }
        if _R.storyboard.main().countryPicker() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'countryPicker' could not be loaded from storyboard 'Main' as 'CountryPickerController'.") }
        if _R.storyboard.main().emailLogin() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emailLogin' could not be loaded from storyboard 'Main' as 'EmailLoginController'.") }
        if _R.storyboard.main().forgotPassword() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPassword' could not be loaded from storyboard 'Main' as 'ResetViewController'.") }
        if _R.storyboard.main().landingPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingPage' could not be loaded from storyboard 'Main' as 'LandingPageController'.") }
        if _R.storyboard.main().phoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneVC' could not be loaded from storyboard 'Main' as 'PhoneController'.") }
        if _R.storyboard.main().signUp() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUp' could not be loaded from storyboard 'Main' as 'SignUpController'.") }
        if _R.storyboard.main().usernameVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'usernameVC' could not be loaded from storyboard 'Main' as 'UsernameController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct map: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mapVC = StoryboardViewControllerResource<MapController>(identifier: "MapVC")
      let name = "Map"

      func mapVC(_: Void = ()) -> MapController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.map().mapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapVC' could not be loaded from storyboard 'Map' as 'MapController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct notifications: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Notifications"
      let notificationsVC = StoryboardViewControllerResource<NotificationsController>(identifier: "NotificationsVC")

      func notificationsVC(_: Void = ()) -> NotificationsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.notifications().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'Notifications' as 'NotificationsController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController

      let bundle = R.hostingBundle
      let findFriends = StoryboardViewControllerResource<FindFriendsController>(identifier: "FindFriends")
      let name = "Profile"
      let profile = StoryboardViewControllerResource<ProfileViewController>(identifier: "Profile")
      let searchContacts = StoryboardViewControllerResource<SearchContactsController>(identifier: "SearchContacts")
      let sendInvites = StoryboardViewControllerResource<SendInvitesController>(identifier: "SendInvites")

      func findFriends(_: Void = ()) -> FindFriendsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findFriends)
      }

      func profile(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profile)
      }

      func searchContacts(_: Void = ()) -> SearchContactsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchContacts)
      }

      func sendInvites(_: Void = ()) -> SendInvitesController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendInvites)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ProfileActive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileActive' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ProfileInactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileInactive' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "SpotBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SpotBlack' is used in storyboard 'Profile', but couldn't be loaded.") }
        }
        if _R.storyboard.profile().findFriends() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findFriends' could not be loaded from storyboard 'Profile' as 'FindFriendsController'.") }
        if _R.storyboard.profile().profile() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profile' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
        if _R.storyboard.profile().searchContacts() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchContacts' could not be loaded from storyboard 'Profile' as 'SearchContactsController'.") }
        if _R.storyboard.profile().sendInvites() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendInvites' could not be loaded from storyboard 'Profile' as 'SendInvitesController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct upload: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AVCameraController

      let avCameraController = StoryboardViewControllerResource<AVCameraController>(identifier: "AVCameraController")
      let bundle = R.hostingBundle
      let chooseSpot = StoryboardViewControllerResource<ChooseSpotController>(identifier: "ChooseSpot")
      let imagePreview = StoryboardViewControllerResource<ImagePreviewController>(identifier: "ImagePreview")
      let name = "Upload"
      let newMap = StoryboardViewControllerResource<NewMapController>(identifier: "NewMap")
      let photoGallery = StoryboardViewControllerResource<PhotoGalleryController>(identifier: "PhotoGallery")
      let shareTo = StoryboardViewControllerResource<ChooseMapController>(identifier: "ShareTo")

      func avCameraController(_: Void = ()) -> AVCameraController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: avCameraController)
      }

      func chooseSpot(_: Void = ()) -> ChooseSpotController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseSpot)
      }

      func imagePreview(_: Void = ()) -> ImagePreviewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imagePreview)
      }

      func newMap(_: Void = ()) -> NewMapController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newMap)
      }

      func photoGallery(_: Void = ()) -> PhotoGalleryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: photoGallery)
      }

      func shareTo(_: Void = ()) -> ChooseMapController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareTo)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CameraLaunchButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CameraLaunchButton' is used in storyboard 'Upload', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "SpotBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SpotBlack' is used in storyboard 'Upload', but couldn't be loaded.") }
        }
        if _R.storyboard.upload().avCameraController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'avCameraController' could not be loaded from storyboard 'Upload' as 'AVCameraController'.") }
        if _R.storyboard.upload().chooseSpot() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseSpot' could not be loaded from storyboard 'Upload' as 'ChooseSpotController'.") }
        if _R.storyboard.upload().imagePreview() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imagePreview' could not be loaded from storyboard 'Upload' as 'ImagePreviewController'.") }
        if _R.storyboard.upload().newMap() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newMap' could not be loaded from storyboard 'Upload' as 'NewMapController'.") }
        if _R.storyboard.upload().photoGallery() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'photoGallery' could not be loaded from storyboard 'Upload' as 'PhotoGalleryController'.") }
        if _R.storyboard.upload().shareTo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareTo' could not be loaded from storyboard 'Upload' as 'ChooseMapController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
